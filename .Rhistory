# then choose which IS reduces the RSD the most (Poo.Picked.IS)
transect.poodat <- transect.mydata_new %>%
filter(type == "Poo") %>%
group_by(SampID, MassFeature, MIS) %>%
summarise(RSD_ofPoo_IND = sd(Adjusted_Area, na.rm = TRUE) / mean(Adjusted_Area, na.rm = TRUE)) %>%
mutate(RSD_ofPoo_IND = ifelse(RSD_ofPoo_IND == "NaN", NA, RSD_ofPoo_IND)) %>%
group_by(MassFeature, MIS) %>%
summarise(RSD_ofPoo =  mean(RSD_ofPoo_IND, na.rm = TRUE)) %>%
mutate(RSD_ofPoo = ifelse(RSD_ofPoo == "NaN", NA, RSD_ofPoo))
transect.poodat <- transect.poodat %>%
left_join(transect.poodat %>% group_by(MassFeature) %>%
summarise(Poo.Picked.IS = unique(MIS)[which.min(RSD_ofPoo)] [1]))
# Get the original RSD, calculate RSD change, decide if MIS is acceptable----------------------------------------------------------------
transect.poodat <- left_join(transect.poodat, transect.poodat %>%
filter(MIS == "Inj_vol" ) %>%
mutate(Orig_RSD = RSD_ofPoo) %>%
select(-RSD_ofPoo, -MIS)) %>%
mutate(del_RSD = (Orig_RSD - RSD_ofPoo)) %>%
mutate(percentChange = del_RSD/Orig_RSD) %>%
mutate(accept_MIS = (percentChange > cut.off & Orig_RSD > cut.off2))
# Change the BMIS to "Inj_vol" if the BMIS is not an acceptable----------------------------------------------------------------
# Adds a column that has the BMIS, not just Poo.Picked.IS
# Changes the FinalBMIS to inject_volume if its no good
transect.fixedpoodat <- transect.poodat %>%
filter(MIS == Poo.Picked.IS) %>%
mutate(FinalBMIS = ifelse(accept_MIS == "FALSE", "Inj_vol", Poo.Picked.IS)) %>%
mutate(FinalRSD = RSD_ofPoo)
newpoodat <- transect.poodat %>%
left_join(transect.fixedpoodat %>% select(MassFeature, FinalBMIS)) %>%
filter(MIS == FinalBMIS) %>%
mutate(FinalRSD = RSD_ofPoo)
Try <- newpoodat %>%
filter(FinalBMIS != "Inj_vol")
QuickReport <- print(paste("% of MFs that picked a BMIS",
length(Try$MassFeature) / length(newpoodat$MassFeature),
"RSD improvement cutoff", cut.off,
"RSD minimum cutoff", cut.off2,
sep = " "))
# Evaluate and visualize the results of your BMIS cutoff----------------------------------------------------------------
IS_toISdat <- transect.mydata_new %>%
filter(MassFeature %in% transect.IS.data$MassFeature) %>%
select(MassFeature, MIS, Adjusted_Area, type) %>%
filter(type == "Smp") %>%
group_by(MassFeature, MIS) %>%
summarise(RSD_ofSmp = sd(Adjusted_Area, na.rm = TRUE)/mean(Adjusted_Area, na.rm = TRUE)) %>%
left_join(transect.poodat %>% select(MassFeature, MIS, RSD_ofPoo, accept_MIS))
injectONlY_toPlot <- IS_toISdat %>%
filter(MIS == "Inj_vol")
ISTest_plot <- ggplot() +
geom_point(dat = IS_toISdat, shape = 21, color = "black", size = 2,aes(x = RSD_ofPoo, y = RSD_ofSmp, fill = accept_MIS)) +
scale_fill_manual(values=c("white","dark gray")) +
geom_point(dat = injectONlY_toPlot, aes(x = RSD_ofPoo, y = RSD_ofSmp), size = 3) +
facet_wrap(~ MassFeature)
#print(ISTest_plot)
# Return data that is normalized via BMIS----------------------------------------------------------------
## original
transect.BMIS_normalizedData <- newpoodat %>% select(MassFeature, FinalBMIS, Orig_RSD, FinalRSD) %>%
left_join(transect.mydata_new, by = "MassFeature") %>%
filter(MIS == FinalBMIS) %>%
unique()
write.csv(transect.BMIS_normalizedData, file = "data_processed/BMIS_Output.csv")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(parallel)
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(parallel)
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(parallel)
options(scipen=999)
Ingalls.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == "HILIC") %>%
select(Compound.Name, z, QE.RF.ratio, HILICMix, Conc..uM, Emperical.Formula) %>%
filter(!is.na(Conc..uM))
## Duplicate rows testing for hilicpos and hilicneg IDs.
test <- which(duplicated(Ingalls.Standards$Compound.Name))
duplicate_compounds <- as.data.frame(Ingalls.Standards$Compound.Name[test]) %>%
rename(Compound.Name = 1)
View(duplicate_compounds)
HILICS.transect <- read.csv("data_processed/QC_Output.csv", header = TRUE) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
mutate(ReplicateName = as.character(ReplicateName)) %>%
select(ReplicateName, Metabolite.name, Column, Area.with.QC, AreaValue, Run.Type)
HILICS.transect$ReplicateName <- gsub("^.{0,1}", "", HILICS.transect$ReplicateName)
HILICS.raw.transect <- HILICS.transect %>%
filter(Metabolite.name %in% Ingalls.Standards$Compound.Name) %>%
rename(Compound.Name = Metabolite.name)
# Apply appropriate filters and isolate standards.
HILICS.transect <- HILICS.transect %>%
filter(Metabolite.name %in% Ingalls.Standards$Compound.Name) %>%
filter(str_detect(ReplicateName, "Std")) %>%
mutate(AreaValue = as.numeric(as.character(AreaValue))) %>%
mutate(Area.with.QC = as.numeric(as.character(Area.with.QC))) %>%
mutate(Compound.Name = Metabolite.name) %>%
select(-Metabolite.name) %>%
left_join(Ingalls.Standards, by = "Compound.Name") %>%
select(ReplicateName, Compound.Name, everything())
HILICS.transect <- HILICS.transect %>%
group_by(Compound.Name) %>%
mutate(pos.and.neg = ifelse(Compound.Name %in% duplicate_compounds$Compound.Name, TRUE, FALSE)) %>%
filter(!(pos.and.neg == TRUE & z == -1)) %>%
filter(!(Compound.Name == "Inosine" & Column == "HILICNeg")) %>%
filter(!(Compound.Name == "Guanine" & Column == "HILICNeg")) %>%
mutate(z = ifelse(Column == "HILICNeg", -1, 1)) %>%
select(-pos.and.neg)
View(HILICS.transect)
RFs.transect <- HILICS.transect %>%
mutate(RF = as.numeric(as.character(Area.with.QC))/as.numeric(Conc..uM))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(parallel)
options(scipen=999)
Ingalls.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == "HILIC") %>%
select(Compound.Name, z, QE.RF.ratio, HILICMix, Conc..uM, Emperical.Formula) %>%
filter(!is.na(Conc..uM))
## Duplicate rows testing for hilicpos and hilicneg IDs.
test <- which(duplicated(Ingalls.Standards$Compound.Name))
duplicate_compounds <- as.data.frame(Ingalls.Standards$Compound.Name[test]) %>%
rename(Compound.Name = 1)
HILICS.transect <- read.csv("data_processed/QC_Output.csv", header = TRUE) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
mutate(ReplicateName = as.character(ReplicateName)) %>%
select(ReplicateName, Metabolite.name, Column, Area.with.QC, AreaValue, Run.Type)
HILICS.transect$ReplicateName <- gsub("^.{0,1}", "", HILICS.transect$ReplicateName)
HILICS.raw.transect <- HILICS.transect %>%
filter(Metabolite.name %in% Ingalls.Standards$Compound.Name) %>%
rename(Compound.Name = Metabolite.name)
# Apply appropriate filters and isolate standards.
HILICS.transect <- HILICS.transect %>%
filter(Metabolite.name %in% Ingalls.Standards$Compound.Name) %>%
filter(str_detect(ReplicateName, "Std")) %>%
mutate(AreaValue = as.numeric(as.character(AreaValue))) %>%
mutate(Area.with.QC = as.numeric(as.character(Area.with.QC))) %>%
mutate(Compound.Name = Metabolite.name) %>%
select(-Metabolite.name) %>%
left_join(Ingalls.Standards, by = "Compound.Name") %>%
select(ReplicateName, Compound.Name, everything())
HILICS.transect <- HILICS.transect %>%
group_by(Compound.Name) %>%
mutate(pos.and.neg = ifelse(Compound.Name %in% duplicate_compounds$Compound.Name, TRUE, FALSE)) %>%
filter(!(pos.and.neg == TRUE & z == -1)) %>%
filter(!(Compound.Name == "Inosine" & Column == "HILICNeg")) %>%
filter(!(Compound.Name == "Guanine" & Column == "HILICNeg")) %>%
mutate(z = ifelse(Column == "HILICNeg", -1, 1)) %>%
select(-pos.and.neg)
RFs.transect <- HILICS.transect %>%
mutate(RF = as.numeric(as.character(Area.with.QC))/as.numeric(Conc..uM))
RFs2.transect <- RFs.transect %>%
mutate(Type = paste(Env = ifelse(str_detect(ReplicateName, "StdsMix|InH2O"), "Standards", "Water"),
Matrix = ifelse(str_detect(ReplicateName, "InMatrix"), "Matrix", "Water"), sep = "_")) %>%
filter(str_detect(ReplicateName, as.character(HILICMix)) | str_detect(ReplicateName, "H2OInMatrix")) %>%
filter(!str_detect(Compound.Name, ",")) %>%
mutate(ReplicateName = substr(ReplicateName, 1, nchar(ReplicateName)-2))
# Calculate RF max and min using only standards in water.
transect.RFs.dimensions <- RFs2.transect %>%
filter(Type == "Standards_Water") %>%
group_by(Compound.Name) %>%
mutate(RF.max = max(RF, na.rm = TRUE),
RF.min = min(RF, na.rm = TRUE))
transect.RFs.dimensions$RF.max[is.infinite(transect.RFs.dimensions$RF.max) | is.nan(transect.RFs.dimensions$RF.max) ] <- NA
transect.RFs.dimensions$RF.min[is.infinite(transect.RFs.dimensions$RF.min) | is.nan(transect.RFs.dimensions$RF.min) ] <- NA
transect.RFs.dimensions <- transect.RFs.dimensions %>%
mutate(RF.diff = RF.max/RF.min) %>%
unique()
# Calculate the response factor ratios using (Standards in Matrix - Water in Matrix) / (Standards in Water) for each replicate.
transect.RFratios <- RFs2.transect %>%
group_by(Compound.Name, Type) %>%
mutate(RF.mean.per_sampleID = mean(RF, na.rm = TRUE)) %>%
select(ReplicateName, Compound.Name, Type, RF.mean.per_sampleID) %>%
unique() %>%
group_by(Compound.Name) %>% filter(n() >= 3) %>%
mutate(RF.ratio =
((RF.mean.per_sampleID[Type == "Standards_Matrix"] - RF.mean.per_sampleID[Type == "Water_Matrix"]) /
RF.mean.per_sampleID[Type == "Standards_Water"])) %>%
select(Compound.Name, RF.ratio) %>%
unique()
transect.RFratios$RF.ratio[transect.RFratios$Compound.Name == "Choline"] <- 1
transect.RFratios$RF.ratio[transect.RFratios$Compound.Name == "Trimethyl-L-lysine"] <- NA ## DROPPED DUE TO SUPER WEIRD NUMBERS
transect.RFratios$RF.ratio[is.nan(transect.RFratios$RF.ratio)] <- NA
rm(list = c("RFs.transect", "RFs2.transect"))
test.RFratios <- transect.RFratios %>%
filter(is.na(RF.ratio))
test.standards <- Ingalls.Standards %>%
filter(Compound.Name %in% test.RFratios$Compound.Name) %>%
rename(RF.ratio = QE.RF.ratio) %>%
select(Compound.Name, RF.ratio) %>%
mutate(Compound.Name = as.character(Compound.Name)) %>%
mutate(RF.ratio = as.character(RF.ratio))
transect.RFratios <- transect.RFratios %>%
as.data.frame() %>%
filter(!is.na(RF.ratio)) %>%
rbind(test.standards)
Samp.Data.transect <- read.csv("data_processed/BMIS_Output.csv") %>%
separate(Run.Cmpd, sep = " ", into = c("Sample.Name")) %>%
mutate(Compound.Name = MassFeature) %>%
filter(Compound.Name %in% transect.RFratios$Compound.Name) %>%
left_join(transect.RFratios) %>%
left_join(transect.RFs.dimensions %>% select(Compound.Name, Column, RF.max, RF.min) %>% unique(), by = "Compound.Name") %>%
mutate(RF.ratio = as.numeric(RF.ratio)) %>%
select(Compound.Name, FinalBMIS, Sample.Name, Adjusted_Area, everything())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(parallel)
options(scipen=999)
Ingalls.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == "HILIC") %>%
select(Compound.Name, z, QE.RF.ratio, HILICMix, Conc..uM, Emperical.Formula) %>%
filter(!is.na(Conc..uM))
## Duplicate rows testing for hilicpos and hilicneg IDs.
test <- which(duplicated(Ingalls.Standards$Compound.Name))
duplicate_compounds <- as.data.frame(Ingalls.Standards$Compound.Name[test]) %>%
rename(Compound.Name = 1)
HILICS.transect <- read.csv("data_processed/QC_Output.csv", header = TRUE) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
mutate(ReplicateName = as.character(ReplicateName)) %>%
select(ReplicateName, Metabolite.name, Column, Area.with.QC, AreaValue, Run.Type)
HILICS.transect$ReplicateName <- gsub("^.{0,1}", "", HILICS.transect$ReplicateName)
HILICS.raw.transect <- HILICS.transect %>%
filter(Metabolite.name %in% Ingalls.Standards$Compound.Name) %>%
rename(Compound.Name = Metabolite.name)
# Apply appropriate filters and isolate standards.
HILICS.transect <- HILICS.transect %>%
filter(Metabolite.name %in% Ingalls.Standards$Compound.Name) %>%
filter(str_detect(ReplicateName, "Std")) %>%
mutate(AreaValue = as.numeric(as.character(AreaValue))) %>%
mutate(Area.with.QC = as.numeric(as.character(Area.with.QC))) %>%
mutate(Compound.Name = Metabolite.name) %>%
select(-Metabolite.name) %>%
left_join(Ingalls.Standards, by = "Compound.Name") %>%
select(ReplicateName, Compound.Name, everything())
HILICS.transect <- HILICS.transect %>%
group_by(Compound.Name) %>%
mutate(pos.and.neg = ifelse(Compound.Name %in% duplicate_compounds$Compound.Name, TRUE, FALSE)) %>%
filter(!(pos.and.neg == TRUE & z == -1)) %>%
filter(!(Compound.Name == "Inosine" & Column == "HILICNeg")) %>%
filter(!(Compound.Name == "Guanine" & Column == "HILICNeg")) %>%
mutate(z = ifelse(Column == "HILICNeg", -1, 1)) %>%
select(-pos.and.neg)
RFs.transect <- HILICS.transect %>%
mutate(RF = as.numeric(as.character(Area.with.QC))/as.numeric(Conc..uM))
RFs2.transect <- RFs.transect %>%
mutate(Type = paste(Env = ifelse(str_detect(ReplicateName, "StdsMix|InH2O"), "Standards", "Water"),
Matrix = ifelse(str_detect(ReplicateName, "InMatrix"), "Matrix", "Water"), sep = "_")) %>%
filter(str_detect(ReplicateName, as.character(HILICMix)) | str_detect(ReplicateName, "H2OInMatrix")) %>%
filter(!str_detect(Compound.Name, ",")) %>%
mutate(ReplicateName = substr(ReplicateName, 1, nchar(ReplicateName)-2))
# Calculate RF max and min using only standards in water.
transect.RFs.dimensions <- RFs2.transect %>%
filter(Type == "Standards_Water") %>%
group_by(Compound.Name) %>%
mutate(RF.max = max(RF, na.rm = TRUE),
RF.min = min(RF, na.rm = TRUE))
transect.RFs.dimensions$RF.max[is.infinite(transect.RFs.dimensions$RF.max) | is.nan(transect.RFs.dimensions$RF.max) ] <- NA
transect.RFs.dimensions$RF.min[is.infinite(transect.RFs.dimensions$RF.min) | is.nan(transect.RFs.dimensions$RF.min) ] <- NA
transect.RFs.dimensions <- transect.RFs.dimensions %>%
mutate(RF.diff = RF.max/RF.min) %>%
unique()
# Calculate the response factor ratios using (Standards in Matrix - Water in Matrix) / (Standards in Water) for each replicate.
transect.RFratios <- RFs2.transect %>%
group_by(Compound.Name, Type) %>%
mutate(RF.mean.per_sampleID = mean(RF, na.rm = TRUE)) %>%
select(ReplicateName, Compound.Name, Type, RF.mean.per_sampleID) %>%
unique() %>%
group_by(Compound.Name) %>% filter(n() >= 3) %>%
mutate(RF.ratio =
((RF.mean.per_sampleID[Type == "Standards_Matrix"] - RF.mean.per_sampleID[Type == "Water_Matrix"]) /
RF.mean.per_sampleID[Type == "Standards_Water"])) %>%
select(Compound.Name, RF.ratio) %>%
unique()
transect.RFratios$RF.ratio[transect.RFratios$Compound.Name == "Choline"] <- 1
transect.RFratios$RF.ratio[transect.RFratios$Compound.Name == "Trimethyl-L-lysine"] <- NA ## DROPPED DUE TO SUPER WEIRD NUMBERS
transect.RFratios$RF.ratio[is.nan(transect.RFratios$RF.ratio)] <- NA
rm(list = c("RFs.transect", "RFs2.transect"))
test.RFratios <- transect.RFratios %>%
filter(is.na(RF.ratio))
test.standards <- Ingalls.Standards %>%
filter(Compound.Name %in% test.RFratios$Compound.Name) %>%
rename(RF.ratio = QE.RF.ratio) %>%
select(Compound.Name, RF.ratio) %>%
mutate(Compound.Name = as.character(Compound.Name)) %>%
mutate(RF.ratio = as.character(RF.ratio))
transect.RFratios <- transect.RFratios %>%
as.data.frame() %>%
filter(!is.na(RF.ratio)) %>%
rbind(test.standards)
Samp.Data.transect <- read.csv("data_processed/BMIS_Output.csv") %>%
separate(Run.Cmpd, sep = " ", into = c("Sample.Name")) %>%
mutate(Compound.Name = MassFeature) %>%
filter(Compound.Name %in% transect.RFratios$Compound.Name) %>%
left_join(transect.RFratios) %>%
left_join(transect.RFs.dimensions %>% select(Compound.Name, Column, RF.max, RF.min) %>% unique(), by = "Compound.Name") %>%
mutate(RF.ratio = as.numeric(RF.ratio)) %>%
select(Compound.Name, FinalBMIS, Sample.Name, Adjusted_Area, everything())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(parallel)
options(scipen=999)
Ingalls.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == "HILIC") %>%
select(Compound.Name, z, QE.RF.ratio, HILICMix, Conc..uM, Emperical.Formula) %>%
filter(!is.na(Conc..uM))
## Duplicate rows testing for hilicpos and hilicneg IDs.
test <- which(duplicated(Ingalls.Standards$Compound.Name))
duplicate_compounds <- as.data.frame(Ingalls.Standards$Compound.Name[test]) %>%
rename(Compound.Name = 1)
HILICS.transect <- read.csv("data_processed/QC_Output.csv", header = TRUE) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
mutate(ReplicateName = as.character(ReplicateName)) %>%
select(ReplicateName, Metabolite.name, Column, Area.with.QC, AreaValue, Run.Type)
HILICS.transect$ReplicateName <- gsub("^.{0,1}", "", HILICS.transect$ReplicateName)
HILICS.raw.transect <- HILICS.transect %>%
filter(Metabolite.name %in% Ingalls.Standards$Compound.Name) %>%
rename(Compound.Name = Metabolite.name)
# Apply appropriate filters and isolate standards.
HILICS.transect <- HILICS.transect %>%
filter(Metabolite.name %in% Ingalls.Standards$Compound.Name) %>%
filter(str_detect(ReplicateName, "Std")) %>%
mutate(AreaValue = as.numeric(as.character(AreaValue))) %>%
mutate(Area.with.QC = as.numeric(as.character(Area.with.QC))) %>%
mutate(Compound.Name = Metabolite.name) %>%
select(-Metabolite.name) %>%
left_join(Ingalls.Standards, by = "Compound.Name") %>%
select(ReplicateName, Compound.Name, everything())
HILICS.transect <- HILICS.transect %>%
group_by(Compound.Name) %>%
mutate(pos.and.neg = ifelse(Compound.Name %in% duplicate_compounds$Compound.Name, TRUE, FALSE)) %>%
filter(!(pos.and.neg == TRUE & z == -1)) %>%
filter(!(Compound.Name == "Inosine" & Column == "HILICNeg")) %>%
filter(!(Compound.Name == "Guanine" & Column == "HILICNeg")) %>%
mutate(z = ifelse(Column == "HILICNeg", -1, 1)) %>%
select(-pos.and.neg)
RFs.transect <- HILICS.transect %>%
mutate(RF = as.numeric(as.character(Area.with.QC))/as.numeric(Conc..uM))
RFs2.transect <- RFs.transect %>%
mutate(Type = paste(Env = ifelse(str_detect(ReplicateName, "StdsMix|InH2O"), "Standards", "Water"),
Matrix = ifelse(str_detect(ReplicateName, "InMatrix"), "Matrix", "Water"), sep = "_")) %>%
filter(str_detect(ReplicateName, as.character(HILICMix)) | str_detect(ReplicateName, "H2OInMatrix")) %>%
filter(!str_detect(Compound.Name, ",")) %>%
mutate(ReplicateName = substr(ReplicateName, 1, nchar(ReplicateName)-2))
# Calculate RF max and min using only standards in water.
transect.RFs.dimensions <- RFs2.transect %>%
filter(Type == "Standards_Water") %>%
group_by(Compound.Name) %>%
mutate(RF.max = max(RF, na.rm = TRUE),
RF.min = min(RF, na.rm = TRUE))
transect.RFs.dimensions$RF.max[is.infinite(transect.RFs.dimensions$RF.max) | is.nan(transect.RFs.dimensions$RF.max) ] <- NA
transect.RFs.dimensions$RF.min[is.infinite(transect.RFs.dimensions$RF.min) | is.nan(transect.RFs.dimensions$RF.min) ] <- NA
transect.RFs.dimensions <- transect.RFs.dimensions %>%
mutate(RF.diff = RF.max/RF.min) %>%
unique()
# Calculate the response factor ratios using (Standards in Matrix - Water in Matrix) / (Standards in Water) for each replicate.
transect.RFratios <- RFs2.transect %>%
group_by(Compound.Name, Type) %>%
mutate(RF.mean.per_sampleID = mean(RF, na.rm = TRUE)) %>%
select(ReplicateName, Compound.Name, Type, RF.mean.per_sampleID) %>%
unique() %>%
group_by(Compound.Name) %>% filter(n() >= 3) %>%
mutate(RF.ratio =
((RF.mean.per_sampleID[Type == "Standards_Matrix"] - RF.mean.per_sampleID[Type == "Water_Matrix"]) /
RF.mean.per_sampleID[Type == "Standards_Water"])) %>%
select(Compound.Name, RF.ratio) %>%
unique()
transect.RFratios$RF.ratio[transect.RFratios$Compound.Name == "Choline"] <- 1
transect.RFratios$RF.ratio[transect.RFratios$Compound.Name == "Trimethyl-L-lysine"] <- NA ## DROPPED DUE TO SUPER WEIRD NUMBERS
transect.RFratios$RF.ratio[is.nan(transect.RFratios$RF.ratio)] <- NA
rm(list = c("RFs.transect", "RFs2.transect"))
test.RFratios <- transect.RFratios %>%
filter(is.na(RF.ratio))
test.standards <- Ingalls.Standards %>%
filter(Compound.Name %in% test.RFratios$Compound.Name) %>%
rename(RF.ratio = QE.RF.ratio) %>%
select(Compound.Name, RF.ratio) %>%
mutate(Compound.Name = as.character(Compound.Name)) %>%
mutate(RF.ratio = as.character(RF.ratio))
transect.RFratios <- transect.RFratios %>%
as.data.frame() %>%
filter(!is.na(RF.ratio)) %>%
rbind(test.standards)
Samp.Data.transect <- read.csv("data_processed/BMIS_Output.csv") %>%
separate(Run.Cmpd, sep = " ", into = c("Sample.Name")) %>%
mutate(Compound.Name = MassFeature) %>%
filter(Compound.Name %in% transect.RFratios$Compound.Name) %>%
left_join(transect.RFratios) %>%
left_join(transect.RFs.dimensions %>% select(Compound.Name, Column, RF.max, RF.min) %>% unique(), by = "Compound.Name") %>%
mutate(RF.ratio = as.numeric(RF.ratio)) %>%
select(Compound.Name, FinalBMIS, Sample.Name, Adjusted_Area, everything())
Quan.Dat.transect <- Samp.Data.transect %>%
mutate(RF.ave = as.numeric(rowMeans(Samp.Data.transect[, c("RF.min", "RF.max")]))) %>%
mutate(umol.in.vial.ave = Adjusted_Area/RF.ave/RF.ratio,
umol.in.vial.max = Adjusted_Area/RF.min/RF.ratio,
umol.in.vial.min = Adjusted_Area/RF.max/RF.ratio) %>%
select(Compound.Name:Adjusted_Area, everything())
original.IS.key <- read.csv("data_extras/InternalStandardNames.csv") %>%
rename(FinalBMIS = Internal_Standards) %>%
mutate(FinalBMIS = as.character(FinalBMIS))
IS.key <- Samp.Data.transect %>%
select(FinalBMIS, MassFeature) %>%
rename(Compound.Name = MassFeature) %>%
unique() %>%
left_join(original.IS.key %>% select(FinalBMIS, Concentration_nM)) %>%
filter(str_detect(FinalBMIS, as.character(Compound.Name)))
rm(original.IS.key)
View(IS.key)
IS.data.transect <- HILICS.transect %>%
filter(as.character(Compound.Name) %in% IS.key$FinalBMIS) %>%
mutate(IS_Area = Area.with.QC,
FinalBMIS = Compound.Name) %>%
select(IS_Area, FinalBMIS, ReplicateName) %>%
left_join(IS.key %>% select(FinalBMIS, Concentration_nM))
IS.names <- data.frame(Compounds = c(IS.key[ ,"FinalBMIS"], as.character(IS.key[ ,"Compound.Name"])))
IS.smp.data.transect <- HILICS.raw.transect %>%
left_join(IS.data.transect %>% select(Compound.Name, Concentration_nM)) %>%
unique() %>%
filter(Compound.Name %in% IS.names$Compounds) %>%
filter(!str_detect(ReplicateName, "Std")) %>%
mutate(Std.Type = ifelse(str_detect(Compound.Name, ","), "Internal_std", "Standard")) %>%
mutate(testcol1 = ifelse(str_detect(Compound.Name, ","), sapply(strsplit(Compound.Name, ","), `[`, 1), Compound.Name)) %>%
mutate(Names = ifelse(str_detect(testcol1, "-"), sapply(strsplit(testcol1, "-"), `[`, 2), testcol1)) %>%
mutate(Pairs = ifelse(!str_detect(Compound.Name, ","), Compound.Name, paste(Names, "IS", sep = "_"))) %>%
select(-c("Pairs", "testcol1", "Run.Type")) %>%
mutate(Area.with.QC = as.numeric(as.character(Area.with.QC))) %>%
arrange(ReplicateName) %>%
group_by(Names) %>%
group_split()
IS.mid_frame <- lapply(IS.smp.data.transect, function(x) group_by(x, ReplicateName))
IS.mid_frame2 <- lapply(IS.mid_frame,
function(x)
mutate(x,
umol.in.vial_IS = (Area.with.QC[Std.Type == "Standard"] / Area.with.QC[Std.Type == "Internal_std"]) * (Concentration_nM[Std.Type == "Internal_std"]/1000)))
IS.smp.data.transect <- do.call(rbind, IS.mid_frame2) %>%
filter(!str_detect(Compound.Name, ",")) %>%
rename(Sample.Name = ReplicateName) %>%
select(Sample.Name:Area.with.QC, Concentration_nM, umol.in.vial_IS)
rm(list = c("IS.names", "HILICS.raw.eddycenter", "IS.mid_frame", "IS.mid_frame2"))
View(IS.smp.data.transect)
all.info <- Quan.Dat.transect %>%
left_join(IS.smp.data.transect %>% select(Sample.Name, Compound.Name, umol.in.vial_IS)) %>%
mutate(umol.in.vial.ave = ifelse(is.na(umol.in.vial_IS), umol.in.vial.ave, umol.in.vial_IS),
umol.in.vial.max = ifelse(is.na(umol.in.vial_IS), umol.in.vial.max, NA),
umol.in.vial.min = ifelse(is.na(umol.in.vial_IS), umol.in.vial.min, NA)) %>%
rename(ReplicateName = Sample.Name) %>%
filter(!str_detect(ReplicateName, "DDA"))
View(all.info)
Dilution.Factor = 2
quanDat2 <- all.info %>%
mutate(nmol.in.Enviro.ave = (umol.in.vial.ave*10^-6*400/5*1000 * Dilution.Factor)) %>%
left_join(HILICS.transect %>% select(Compound.Name, Emperical.Formula)) %>%
select(Compound.Name, ReplicateName, Adjusted_Area, Orig_RSD:Emperical.Formula) %>%
unique()
View(quanDat2)
# Okay dokay, go get how many Carbons and Nitrogens there are here.
quanDat3 <- quanDat2  %>%
mutate(C = ifelse(is.na(str_extract(Emperical.Formula, "^C\\d\\d")),
str_extract(Emperical.Formula, "^C\\d"),
str_extract(Emperical.Formula, "^C\\d\\d"))) %>%
mutate(C = as.numeric(str_replace_all(C, "C", ""))) %>%
mutate(N = ifelse(str_detect(Emperical.Formula, "N\\D"),
1,
str_extract(Emperical.Formula, "N\\d"))) %>%
mutate(N = as.numeric(str_replace_all(N, "N", ""))) %>%
mutate(nmol.C.ave = nmol.in.Enviro.ave*C,
nmol.N.ave = nmol.in.Enviro.ave*N ) %>%
select(Compound.Name, SampID, ReplicateName, everything())
quanDatSum <- quanDat3 %>%
group_by(Compound.Name) %>%
summarise(nmol.Enviro.med = median(nmol.in.Enviro.ave, na.rm  = T),
nmol.Enviro.min = min(nmol.in.Enviro.ave, na.rm  = T),
nmol.Enviro.max = max(nmol.in.Enviro.ave, na.rm  = T),
nmol.C.med = median(nmol.C.ave, na.rm  = T),
nmol.C.min = min(nmol.C.ave, na.rm  = T),
nmol.C.max = max(nmol.C.ave, na.rm  = T)) %>%
arrange(desc(nmol.Enviro.med))
# Cacluate mole fractions of each compound.
TotalMoles <- quanDat3  %>%
select(SampID, nmol.C.ave, nmol.N.ave) %>%
group_by(SampID) %>%
summarise(totalCmeasured_nM_perID = sum(as.numeric(nmol.C.ave), na.rm = TRUE),
totalNmeasured_nM_perID = sum(as.numeric(nmol.N.ave), na.rm = TRUE))
quanDat4 <- quanDat3 %>%
unique() %>%
left_join(TotalMoles) %>%
mutate(ratioCN = totalCmeasured_nM_perID / totalNmeasured_nM_perID) %>%
mutate(molFractionC = nmol.C.ave/totalCmeasured_nM_perID,
molFractionN = nmol.N.ave/totalNmeasured_nM_perID) %>%
select(Compound.Name, ReplicateName, Adjusted_Area, Area.with.QC, RF.ratio:molFractionN) %>%
unique()
quanDatSum <- quanDat4 %>%
group_by(Compound.Name) %>%
summarise(nmol.Enviro.med = median(nmol.in.Enviro.ave, na.rm  = T),
nmol.Enviro.min = min(nmol.in.Enviro.ave, na.rm  = T),
nmol.Enviro.max = max(nmol.in.Enviro.ave, na.rm  = T),
nmol.C.med = median(nmol.C.ave, na.rm  = T),
nmol.C.min = min(nmol.C.ave, na.rm  = T),
nmol.C.max = max(nmol.C.ave, na.rm  = T),
mol.C.Fraction.med = median(molFractionC, na.rm = T),
mol.C.Fraction.min = min(molFractionC, na.rm = T),
mol.C.Fraction.max = max(molFractionC, na.rm = T)) %>%
arrange(desc(Compound.Name))
write.csv(quanDatSum, "data_processed/Quantified_Summary.csv")
write.csv(quanDat4, "data_processed/Quantified_Full.csv")
write.csv(TotalMoles, "data_processed/Quantified_per_SampID.csv")
View(quanDat4)
View(quanDatSum)
